License: GPL will work

This is a simple javascript graphics + sound rendering library using node.js.
The idea was to make a development platform to help my kids learn programming.
I like node.js and its universe of modules, but there seemed to be a lack
of game-like programming libraries. Everything seemed to be targeting the
use of a browser.

This library uses the N-API scheme to link 'c' code to node.js. The lib/
subdirectory contains code for the module, and the top level directory
contains lots of javascript programs that make use of the "gfx" module in
various ways.

Rendering is done with the ftgrays.c code taken from an old version of
freetype, I've used it in many projects, like SDL_basic.

For sound output if sound is enabled audio is locked to 44100 hz, stereo.
The program has to call the function gfx.audio() with a callback function gets
passed the number of audio sample pairs to produce. The callback function
must return an array of samples (left, right, left, right, etc.) that are in
the range +/- 1. The module handles clipping so samples are clamped to
the +/- 1 range.

There are various graphics primitives, look at everything.js to see most,
if not all of them. There is a gfx.shape() function that takes an array
of arrays, each of which are any of:
[x1,y1]
	Point (x1,y1) is on the path

[x1,y1,x2,y2]
	Point (x1,y1) is on the path, (x2,y2) is a control point for a
	quadratic bezier curve

[x1,y1,x2,y2,x3,y3]
	Point (x1,y1) is on the path, (x2,y2) and (x3,y3) are control points
	for a cubic bezier curve

gfx.shape() fills in the path described by the array of points (and control
points). There is no implementation of rendering the outline of the path
itself like svg can offer... just the fill is implemented and it uses the
even/odd winding rule.

The coordinate system for rending is such that regardless of whether the
window is a square or rectangle, the range (-100, -100) to (100,100) cover
the largest centered square region that can fit in the window. (0,0) is in
the center of the screen. Positive x and y are right and up from the center.

There is a mechanism gfx.loadmp3() to read an mp3 file and return an object
with some informational members as well as a samples array, which can be
fed to the audio device for sound effects. soundFX.js is an example.

I hope this might be useful, that's why I'm sharing it.

BUILDING:

Just do

make

and hopefully it will build. If it builds correctly the module will get
dropped in $(HOME)/.node_modules/gfx and node.js seems to be able to find it
there. Just delete that directory to uninstall.

The build process requires:
node-gyp
libmad dev
libpng dev
libSDL2
